filetype plugin indent on   " Identify language specific indent options
filetype plugin on
syntax on                   " use syntax..

set autoread                " auto reload files on change
set noswapfile
set nowrap

" read file settings
set ffs=unix,dos,mac
set backspace=indent,eol,start 

" Visual settings
set background=dark
colorscheme gruvbox

" UI
set showcmd     " Show cmd below
set number      " Show line numbers
set showmatch   " Show matching (improved by matchit plugin)
set linebreak   "
set cursorline  " highlight current line

set scrolloff=5 " always show 5 lines above and below cursor
set hidden " hides abandoned buffers
set lazyredraw  " only redraw if necessary (improves macros performance)

" Draw tabs as >.
set list
set listchars=tab:»·,trail:·

" search settings
set hlsearch
set incsearch
set smartcase
set ignorecase
set magic

" Tabs / spaces
set expandtab
set autoindent
set smartindent
set smarttab
autocmd FileType make set noexpandtab " Tabs in make files

set shiftwidth=2
set tabstop=2
set softtabstop=2 

" autocomplete cmdline
set wildmenu
set wildmode=longest,list:longest

" ==================== Airline ====================
set laststatus                            =2
let g:airline#extensions#tabline#enabled  = 1    " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " show just name
let g:airline_powerline_fonts = 1

" ==================== Syntastic ====================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_cpp_compiler_options     = '-std=c++11'
let g:syntastic_always_populate_loc_list = 1

" ==================== NerdTree ====================
let g:nerdtree_tabs_focus_on_files = 1
let g:NERDTreeShowHidden           = 1

" Regular files need spelling and no highlight end
augroup noProg
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en_us 
autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en_us 
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us 
augroup END

" ==================== Ale ====================
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'

highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

" ==================== Prettier ====================
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_comma = 'all'

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.html PrettierAsync

" ==================== Deoplete ====================
if has('nvim')
  let g:deoplete#enable_at_startup = 1

  let g:deoplete#max_abbr_width = 0
  let g:deoplete#max_menu_width = 0

  "let g:deoplete#file#enable_buffer_path = 1

  " Use partial fuzzy matches like YouCompleteMe
  call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy'])
  call deoplete#custom#source('_', 'converters', ['converter_remove_paren'])
  call deoplete#custom#source('_', 'disabled_syntaxes', ['Comment', 'String'])

  " Use smartcase.
  call deoplete#custom#option('smart_case', v:true)

  "let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})

  call deoplete#custom#source('omni', 'functions', {
    \ 'javascript': ['tern#Complete', 'jspc#omni'],
  \})

endif

" ==================== Denite ====================
" Wrap in try/catch to avoid errors on initial install before plugin is available
try
call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
" Use AG instead of grep
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep', '--hidden'])

" Recommended defaults
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Remove date from buffer list
call denite#custom#var('buffer', 'date_format', '')

" Custom options for Denite
"   auto_resize             - Auto resize the Denite window height automatically.
"   prompt                  - Customize denite prompt
"   direction               - Specify Denite window direction as directly below current pane
"   winminheight            - Specify min height for Denite window
"   highlight_mode_insert   - Specify h1-CursorLine in insert mode
"   prompt_highlight        - Specify color of prompt
"   highlight_matched_char  - Matched characters highlight
"   highlight_matched_range - matched range highlight
let s:denite_options = {'default' : {
\ 'split': 'floating',
\ 'start_filter': 1,
\ 'auto_resize': 1,
\ 'source_names': 'short',
\ 'prompt': 'λ ',
\ 'highlight_matched_char': 'QuickFixLine',
\ 'highlight_matched_range': 'Visual',
\ 'highlight_window_background': 'Visual',
\ 'highlight_filter_background': 'DiffAdd',
\ 'winrow': 1,
\ 'vertical_preview': 1
\ }}

" Loop through denite options and enable them
function! s:profile(opts) abort
  for l:fname in keys(a:opts)
    for l:dopt in keys(a:opts[l:fname])
      call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
    endfor
  endfor
endfunction

call s:profile(s:denite_options)
catch
  echo 'Denite not installed. It should work after running :PlugInstall'
endtry"

" ==================== delimitMate ====================
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:delimitMate_smart_quotes = 1
let g:delimitMate_expand_inside_quotes = 0
let g:delimitMate_smart_matchpairs = '^\%(\w\|\$\)'

" ==================== Git ====================
autocmd FileType gitcommit setlocal spell

" ==================== NerdCommenter ====================
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
"let g:NERDCompactSexyComs = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

" ==================== Indentline ====================
autocmd Filetype json :IndentLinesDisable

" ==================== Black ====================
" Run black on save
autocmd BufWritePre *.py execute ':Black'

" ==================== Omnisharp ====================
" Code format on save
autocmd BufWritePre *.cs OmniSharpCodeFormat

" Show type information automatically when the cursor stops moving.
" Note that the type is echoed to the Vim command line, and will overwrite
" any other messages in this space including e.g. ALE linting messages."
"autocmd CursorHold *.cs OmniSharpTypeLookup

" ==================== LSP config ====================
lua <<EOF
  require'lspconfig'.tsserver.setup{}
  require'lspconfig'.html.setup{}
  require'lspconfig'.dockerls.setup{}
  require'lspconfig'.cssls.setup{}
  require'lspconfig'.yamlls.setup{}
  require'lspconfig'.jedi_language_server.setup{}
  require'lspconfig'.angularls.setup{}
EOF
