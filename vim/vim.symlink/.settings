filetype plugin indent on   " Identify language specific indent options
filetype plugin on
syntax on                   " use syntax..

set autoread                " auto reload files on change
set noswapfile
set nowrap

" read file settings
set ffs=unix,dos,mac
set backspace=indent,eol,start 

" Visual settings
set background=dark
colorscheme gruvbox

" UI
set showcmd     " Show cmd below
set number      " Show line numbers
set showmatch   " Show matching (improved by matchit plugin)
set linebreak   "
set cursorline  " highlight current line

set scrolloff=5 " always show 5 lines above and below cursor
set hidden " hides abandoned buffers
set lazyredraw  " only redraw if necessary (improves macros performance)

" Draw tabs as >.
set list
set listchars=tab:»·,trail:·

" search settings
set hlsearch
set incsearch
set smartcase
set ignorecase
set magic

" Tabs / spaces
set expandtab
set autoindent
set smartindent
set smarttab
autocmd FileType make set noexpandtab " Tabs in make files

set shiftwidth=2
set tabstop=2
set softtabstop=2 

" autocomplete cmdline
set wildmenu
set wildmode=longest,list:longest

" ctrlp settings
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" ==================== Airline ====================
set laststatus                            =2
let g:airline#extensions#tabline#enabled  = 1    " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " show just name
let g:airline_powerline_fonts = 1

" ==================== Syntastic ====================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_cpp_compiler_options     = '-std=c++11'
let g:syntastic_always_populate_loc_list = 1

" ==================== NerdTree ====================
let g:nerdtree_tabs_focus_on_files = 1
let g:NERDTreeShowHidden           = 1

" Regular files need spelling and no highlight end
augroup noProg
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en_us 
autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en_us 
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us 
augroup END

" ==================== Ale ====================
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'

highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

" ==================== Prettier ====================
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_comma = 'all'

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.html PrettierAsync

" ==================== Deoplete ====================
if has('nvim')
  let g:deoplete#enable_at_startup = 1

  let g:deoplete#max_abbr_width = 0
  let g:deoplete#max_menu_width = 0

  "let g:deoplete#file#enable_buffer_path = 1

  " Use partial fuzzy matches like YouCompleteMe
  call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy'])
  call deoplete#custom#source('_', 'converters', ['converter_remove_paren'])
  call deoplete#custom#source('_', 'disabled_syntaxes', ['Comment', 'String'])

  " Use smartcase.
  call deoplete#custom#option('smart_case', v:true)

  "let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})

  call deoplete#custom#source('omni', 'functions', {
    \ 'javascript': ['tern#Complete', 'jspc#omni'],
    \ 'cs': ['OmniSharp#Complete'],
  \})

  call deoplete#custom#var('omni', 'input_patterns', {
    \ 'cs': '[^. *\t]\.\w*',
  \})

endif

" ==================== Omni ====================
augroup omnifuncs
autocmd!
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup end

" ==================== Tern ====================
autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>
if exists('g:plugs["tern_for_vim"]')
  let g:tern_show_argument_hints = 'on_hold'
  let g:tern_show_signature_in_pum = 1
  let g:tern#command = ['tern']
  let g:tern#arguments = ['--persistent']
  autocmd FileType javascript setlocal omnifunc=tern#Complete
endif

" Set bin if you have many instalations
"let g:deoplete#sources#ternjs#tern_bin = '/path/to/tern_bin'
"let g:deoplete#sources#ternjs#timeout = 1

" Whether to include the types of the completions in the result data. Default: 0
let g:deoplete#sources#ternjs#types = 1

" Whether to include the distance (in scopes for variables, in prototypes for 
" properties) between the completions and the origin position in the result 
" data. Default: 0
let g:deoplete#sources#ternjs#depths = 1

" Whether to include documentation strings (if found) in the result data.
" Default: 0
let g:deoplete#sources#ternjs#docs = 1

" When on, only completions that match the current word at the given point will
" be returned. Turn this off to get all results, so that you can filter on the 
" client side. Default: 1
let g:deoplete#sources#ternjs#filter = 0

" Whether to use a case-insensitive compare between the current word and 
" potential completions. Default 0
let g:deoplete#sources#ternjs#case_insensitive = 1

" When completing a property and no completions are found, Tern will use some 
" heuristics to try and return some properties anyway. Set this to 0 to 
" turn that off. Default: 1
let g:deoplete#sources#ternjs#guess = 0

" Determines whether the result set will be sorted. Default: 1
let g:deoplete#sources#ternjs#sort = 0

" When disabled, only the text before the given position is considered part of 
" the word. When enabled (the default), the whole variable name that the cursor
" is on will be included. Default: 1
let g:deoplete#sources#ternjs#expand_word_forward = 0

" Whether to ignore the properties of Object.prototype unless they have been 
" spelled out by at least two characters. Default: 1
let g:deoplete#sources#ternjs#omit_object_prototype = 0

" Whether to include JavaScript keywords when completing something that is not 
" a property. Default: 0
let g:deoplete#sources#ternjs#include_keywords = 1

" If completions should be returned when inside a literal. Default: 1
let g:deoplete#sources#ternjs#in_literal = 0


"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
  \ 'jsx',
  \ 'javascript.jsx',
  \ 'vue',
  \ '...'
\ ]

" ==================== delimitMate ====================
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:delimitMate_smart_quotes = 1
let g:delimitMate_expand_inside_quotes = 0
let g:delimitMate_smart_matchpairs = '^\%(\w\|\$\)'

" spell check for git commits
autocmd FileType gitcommit setlocal spell

" autocomplete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif"

" ==================== NerdCommenter ====================
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
"let g:NERDCompactSexyComs = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

" ==================== Indentline ====================
autocmd Filetype json :IndentLinesDisable


" ==================== Black ====================
" Run black on save
autocmd BufWritePre *.py execute ':Black'

" ==================== Omnisharp ====================
" Code format on save
autocmd BufWritePre *.cs OmniSharpCodeFormat

" Show type information automatically when the cursor stops moving.
" Note that the type is echoed to the Vim command line, and will overwrite
" any other messages in this space including e.g. ALE linting messages."
"autocmd CursorHold *.cs OmniSharpTypeLookup

" ==================== LSP config ====================
lua <<EOF
  require'lspconfig'.tsserver.setup{}
  require'lspconfig'.html.setup{}
  require'lspconfig'.dockerls.setup{}
  require'lspconfig'.cssls.setup{}
  require'lspconfig'.yamlls.setup{}
  require'lspconfig'.jedi_language_server.setup{}
EOF
