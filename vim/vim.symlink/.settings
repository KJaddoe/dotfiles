filetype plugin indent on   " Identify language specific indent options
filetype plugin on
syntax on                   " use syntax..

set autoread                " auto reload files on change
set noswapfile

" read file settings
set ffs=unix,dos,mac
set backspace=indent,eol,start 

" Visual settings
set t_Co=256
set background=dark
colorscheme jellybeans " lucius (dark) molokai (dark) jellybean (dark) ir_black (dark) iceberg molokai hemisu apprentice hybrid

" UI
set showcmd     " Show cmd below
set number      " Show line numbers
set showmatch   " Show matching (improved by matchit plugin)
set linebreak   "
set cursorline  " highlight current line

set scrolloff=5 " always show 5 lines above and below cursor
set hidden " hides abandoned buffers
set lazyredraw  " only redraw if necessary (improves macros performance)

" Draw tabs as >.
set list
set listchars=tab:»·,trail:·

" search settings
set hlsearch
set incsearch
set smartcase
set ignorecase

" Tabs / spaces
set expandtab
set autoindent
set smartindent
set smarttab
autocmd FileType make set noexpandtab " Tabs in make files

set shiftwidth=2
set tabstop=2
set softtabstop=2 

" autocomplete cmdline
set wildmenu
set wildmode=longest,list:longest

" ctrlp settings
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" ==================== Airline ====================
set laststatus                            =2
let g:airline#extensions#tabline#enabled  = 1    " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " show just name
let g:airline_powerline_fonts = 1

" ==================== Syntastic ====================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_cpp_compiler_options     = '-std=c++11'
let g:syntastic_always_populate_loc_list = 1

" ==================== NerdTree ====================
let g:nerdtree_tabs_focus_on_files = 1
let g:NERDTreeShowHidden           = 1

" Regular files need spelling and no highlight end
augroup noProg
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en_us 
autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en_us 
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us 
augroup END

" ==================== UltiSnips ====================
" snippets
" trigger configuration
" let g:UltiSnipsExpandTrigger="<tab>"

set nowrap

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1

" ==================== Ale ====================
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'

highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

" ==================== Prettier ====================
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_comma = 'all'

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.html PrettierAsync

" ==================== NeoSnippet ====================
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
  \ pumvisible() ? "\<C-n>" :
  \ neosnippet#expandable_or_jumpable() ?
  \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif"
let g:neosnippet#enable_completed_snippet = 1
" ==================== Deoplete ====================
if has('nvim')
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_ignore_case = 1
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#enable_camel_case = 1
  let g:deoplete#enable_refresh_always = 1

  let g:deoplete#max_abbr_width = 0
  let g:deoplete#max_menu_width = 0

  let g:deoplete#file#enable_buffer_path = 1

  " Use partial fuzzy matches like YouCompleteMe
  "call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy'])
  "call deoplete#custom#source('_', 'converters', ['converter_remove_paren'])
  "call deoplete#custom#source('_', 'disabled_syntaxes', ['Comment', 'String'])

  "set completeopt=longest,menuone,preview
  "let g:deoplete#sources = {}
  "let g:deoplete#sources['javascript.jsx'] = ['file', 'ultisnips', 'ternjs']

  "let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})
  if !exists('g:deoplete#omni#functions')
    let g:deoplete#omni#functions = {}
  endif
  let g:deoplete#omni#functions.typescript = [
  \ 'tern#Complete',
  \ 'jspc#omni'
  \]
  let g:deoplete#omni#functions.javascript = [
  \ 'tern#Complete',
  \ 'jspc#omni'
  \]
  "let g:deoplete#disable_auto_complete = 1

endif

" ==================== Omni ====================
augroup omnifuncs
autocmd!
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup end

" ==================== Tern ====================
autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>
if exists('g:plugs["tern_for_vim"]')
let g:tern_show_argument_hints = 'on_hold'
let g:tern_show_signature_in_pum = 1
let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']
autocmd FileType javascript setlocal omnifunc=tern#Complete
endif

" ==================== delimitMate ====================
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:delimitMate_smart_quotes = 1
let g:delimitMate_expand_inside_quotes = 0
let g:delimitMate_smart_matchpairs = '^\%(\w\|\$\)'

" spell check for git commits
autocmd FileType gitcommit setlocal spell

" autocomplete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif"

" ==================== NerdCommenter ====================
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1
